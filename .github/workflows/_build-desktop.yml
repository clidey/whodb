name: Build Desktop Applications

on:
  workflow_call:
    inputs:
      version:
        description: 'Version to build'
        required: true
        type: string
      edition:
        description: 'Edition to build (ce or ee)'
        required: false
        type: string
        default: 'ce'
      platforms:
        description: 'Platforms to build (comma-separated: windows-amd64,windows-arm64,darwin-universal)'
        required: false
        type: string
        default: 'windows-amd64,windows-arm64,darwin-universal'
    secrets:
      APPLE_CERTIFICATES_P12:
        required: false
      APPLE_CERTIFICATES_PASSWORD:
        required: false
      KEYCHAIN_PASSWORD:
        required: false
      APPLE_DEVELOPER_ID_APPLICATION:
        required: false
      APPLE_ID:
        required: false
      APPLE_APP_PASSWORD:
        required: false
      APPLE_TEAM_ID:
        required: false
      APPLE_MAS_CERTIFICATES_P12:
        required: false
      APPLE_MAS_CERTIFICATES_PASSWORD:
        required: false
      APPLE_MAS_PROVISIONING_PROFILE:
        required: false

jobs:
  build-desktop:
    name: Build Desktop (${{ matrix.platform }}-${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows builds for Microsoft Store
          - os: windows-latest
            platform: windows
            arch: amd64
            make-target: ci-build-prod-windows-amd64
            enabled: ${{ contains(inputs.platforms, 'windows-amd64') }}
          - os: windows-11-arm
            platform: windows
            arch: arm64
            make-target: ci-build-prod-windows-arm64
            enabled: ${{ contains(inputs.platforms, 'windows-arm64') }}
          # macOS build for DMG distribution (Developer ID)
          - os: macos-latest
            platform: darwin
            arch: universal
            build-type: dmg
            make-target: build-prod-mac
            enabled: ${{ contains(inputs.platforms, 'darwin-universal') }}
          # macOS build for Mac App Store (MAS certificates)
          - os: macos-latest
            platform: darwin
            arch: universal
            build-type: mas
            make-target: build-prod-mac
            enabled: ${{ contains(inputs.platforms, 'darwin-universal') }}
    steps:
      - name: Skip if not enabled
        if: matrix.enabled == false
        run: echo "Skipping ${{ matrix.platform }}-${{ matrix.arch }}"

      - name: Checkout
        if: matrix.enabled != false
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Setup Go
        if: matrix.enabled != false
        uses: actions/setup-go@v5
        with:
          go-version-file: 'desktop-${{ inputs.edition }}/go.mod'
          cache: true
          cache-dependency-path: |
            desktop-${{ inputs.edition }}/go.sum
            desktop-${{ inputs.edition }}/go.mod
            core/go.sum
            core/go.mod

      - name: Cache Go build artifacts
        if: matrix.enabled != false
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/Library/Caches/go-build
            ~/AppData/Local/go-build
          key: ${{ runner.os }}-${{ runner.arch }}-go-build-${{ hashFiles('core/go.sum', 'desktop-ce/go.sum', 'desktop-ee/go.sum', 'core/go.mod', 'desktop-ce/go.mod', 'desktop-ee/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-go-build-
            ${{ runner.os }}-go-build-

      - name: Setup Node.js and pnpm
        if: matrix.enabled != false
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - uses: pnpm/action-setup@v4
        if: matrix.enabled != false
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        if: matrix.enabled != false
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        if: matrix.enabled != false
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache frontend build
        if: matrix.enabled != false
        id: frontend-cache
        uses: actions/cache@v4
        with:
          path: frontend/build
          key: frontend-build-${{ inputs.edition }}-${{ hashFiles('frontend/package.json', 'frontend/pnpm-lock.yaml', 'frontend/tsconfig.json') }}
          restore-keys: |
            frontend-build-${{ inputs.edition }}-

      - name: Install frontend dependencies
        if: matrix.enabled != false
        working-directory: ./frontend
        env:
          CYPRESS_INSTALL_BINARY: "0"  # Skip Cypress binary - not needed for production builds
        run: pnpm i

      - name: Cache Wails binary
        if: matrix.enabled != false
        id: cache-wails
        uses: actions/cache@v4
        with:
          path: ~/go/bin/wails
          key: ${{ runner.os }}-wails-v2-latest

      - name: Install Wails CLI
        if: matrix.enabled != false && steps.cache-wails.outputs.cache-hit != 'true'
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      # Import Apple Developer certificates for macOS DMG signing
      - name: Import Apple Developer Certificates (Developer ID)
        if: matrix.platform == 'darwin' && matrix.build-type == 'dmg' && matrix.enabled != false
        env:
          CERTIFICATE_P12_BASE64: ${{ secrets.APPLE_CERTIFICATES_P12 }}
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          if [ -z "$CERTIFICATE_P12_BASE64" ]; then
            echo "‚ùå ERROR: Apple certificates are required for macOS builds"
            echo "Please configure APPLE_CERTIFICATES_P12 and APPLE_CERTIFICATES_PASSWORD secrets"
            exit 1
          fi

          if [ -z "$CERTIFICATE_PASSWORD" ]; then
            echo "‚ùå ERROR: APPLE_CERTIFICATES_PASSWORD is required"
            exit 1
          fi

          echo "üîê Setting up keychain for code signing..."

          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD_VALUE="${KEYCHAIN_PASSWORD:-$(uuidgen)}"

          # Decode certificate
          echo "$CERTIFICATE_P12_BASE64" | base64 --decode -o "$CERTIFICATE_PATH"

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD_VALUE" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD_VALUE" "$KEYCHAIN_PATH"

          # Import certificate to keychain
          security import "$CERTIFICATE_PATH" -P "$CERTIFICATE_PASSWORD" \
            -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"

          # Set keychain search list
          security list-keychain -d user -s "$KEYCHAIN_PATH" $(security list-keychains -d user | sed s/\"//g)

          # Allow codesign to access keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: \
            -s -k "$KEYCHAIN_PASSWORD_VALUE" "$KEYCHAIN_PATH"

          echo "‚úÖ Certificates imported successfully"

          # List available signing identities for verification
          echo "Available codesigning identities:"
          security find-identity -v -p codesigning "$KEYCHAIN_PATH"

          echo ""
          echo "Available basic identities (includes installer certs):"
          security find-identity -v -p basic "$KEYCHAIN_PATH"

          echo ""
          echo "All identities in keychain:"
          security find-identity -v "$KEYCHAIN_PATH"

      # Save MAS provisioning profile for later (after build)
      - name: Prepare MAS Provisioning Profile
        if: matrix.platform == 'darwin' && matrix.build-type == 'mas' && matrix.enabled != false
        env:
          MAS_PROVISIONING_PROFILE: ${{ secrets.APPLE_MAS_PROVISIONING_PROFILE }}
        run: |
          if [ -z "$MAS_PROVISIONING_PROFILE" ]; then
            echo "‚ùå ERROR: APPLE_MAS_PROVISIONING_PROFILE is required for MAS builds"
            exit 1
          fi

          echo "üìù Saving provisioning profile for post-build signing..."
          mkdir -p desktop-${{ inputs.edition }}/build/darwin
          echo "$MAS_PROVISIONING_PROFILE" | base64 --decode -o desktop-${{ inputs.edition }}/build/darwin/embedded.provisionprofile
          echo "‚úÖ Provisioning profile saved"

      # Windows AMD64 Build
      - name: Build Windows AMD64
        if: matrix.platform == 'windows' && matrix.arch == 'amd64' && matrix.enabled != false
        working-directory: ./desktop-${{ inputs.edition }}
        shell: pwsh
        env:
          GOARCH: ${{ matrix.arch }}
        run: |
          Write-Host "Building Windows executable for MSIX packaging..."

          # Prepare frontend
          Write-Host "Preparing frontend..."
          New-Item -ItemType Directory -Path frontend/dist -Force | Out-Null
          Set-Location ../frontend

          # Check if frontend is already built from cache
          if (Test-Path "build/index.html") {
              Write-Host "Using cached frontend build"
          } else {
              Write-Host "Building frontend..."
              $env:CYPRESS_INSTALL_BINARY = "0"  # Skip Cypress binary for production build
              pnpm run build:${{ inputs.edition }}
          }

          Copy-Item -Path build/* -Destination ../desktop-${{ inputs.edition }}/frontend/dist/ -Recurse
          Set-Location ../desktop-${{ inputs.edition }}

          Write-Host "Using Makefile to build..."
          # Use the CI-specific target that doesn't rebuild frontend
          make ${{ matrix.make-target }}

          if ($LASTEXITCODE -ne 0) {
              Write-Error "Make build failed with exit code: $LASTEXITCODE"
              exit 1
          }

          # Verify the executable is in the expected location
          if (Test-Path "build/windows/amd64/whodb.exe") {
              Write-Host "‚úÖ Executable ready: build/windows/amd64/whodb.exe"
          } else {
              Write-Error "Could not find whodb.exe at expected location"
              exit 1
          }

      # Windows ARM64 Build (temporarily disabled)
      - name: Skip Windows ARM64 Build
        if: matrix.platform == 'windows' && matrix.arch == 'arm64' && matrix.enabled != false
        shell: pwsh
        run: |
          Write-Host "‚ö†Ô∏è Windows ARM64 build is temporarily disabled due to toolchain issues"
          New-Item -ItemType Directory -Force -Path "./desktop-${{ inputs.edition }}/build/windows/arm64"

      # macOS Build
      - name: Clean previous macOS build
        if: matrix.platform == 'darwin' && matrix.enabled != false
        working-directory: ./desktop-${{ inputs.edition }}
        run: |
          echo "Cleaning previous build to ensure bundle ID changes take effect..."
          # Clean build outputs but preserve template files
          rm -rf build/darwin/universal build/darwin/amd64 build/darwin/arm64 build/dmgroot || true
          rm -rf build/bin wails.lock || true
          echo "Template files preserved in build/darwin/"

      - name: Prepare MAS entitlements and provisioning profile
        if: matrix.platform == 'darwin' && matrix.build-type == 'mas' && matrix.enabled != false
        working-directory: ./desktop-${{ inputs.edition }}
        run: |
          echo "Preparing MAS-specific entitlements..."
          mkdir -p build/darwin
          # Use MAS entitlements for MAS builds
          cp ../macos/entitlements.mas.plist build/darwin/entitlements.plist
          echo "‚úÖ MAS entitlements prepared"

      - name: Verify entitlements before build
        if: matrix.platform == 'darwin' && matrix.enabled != false
        working-directory: ./desktop-${{ inputs.edition }}
        run: |
          echo "Checking for entitlements.plist before build..."
          ls -la build/darwin/ || echo "build/darwin doesn't exist"

          if [ -f build/darwin/entitlements.plist ]; then
            echo "‚úÖ Entitlements exist before build"
          else
            echo "‚ùå Entitlements missing before build"
          fi

      - name: Build macOS
        if: matrix.platform == 'darwin' && matrix.enabled != false
        working-directory: ./desktop-${{ inputs.edition }}
        run: make ${{ matrix.make-target }} VERSION=${{ inputs.version }}

      - name: Verify entitlements after build
        if: matrix.platform == 'darwin' && matrix.enabled != false
        working-directory: ./desktop-${{ inputs.edition }}
        run: |
          echo "Checking for entitlements.plist after build..."
          ls -la build/darwin/ || echo "build/darwin doesn't exist"

          if [ -f build/darwin/entitlements.plist ]; then
            echo "‚úÖ Entitlements exist after build"
          else
            echo "‚ùå Entitlements deleted during build"
            echo "Recreating from source..."
            # Fallback: copy from source if it was deleted
            if [ -f ../../desktop-${{ inputs.edition }}/build/darwin/entitlements.plist ]; then
              cp ../../desktop-${{ inputs.edition }}/build/darwin/entitlements.plist build/darwin/
            fi
          fi

      - name: Patch Bundle ID and Sign (DMG)
        if: matrix.platform == 'darwin' && matrix.build-type == 'dmg' && matrix.enabled != false
        env:
          APPLE_DEVELOPER_ID_APPLICATION: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION }}
        working-directory: ./desktop-${{ inputs.edition }}
        run: |
          APP_PATH="build/darwin/universal/WhoDB.app"

          if [ ! -d "$APP_PATH" ]; then
            echo "‚ùå ERROR: App bundle not found at $APP_PATH"
            exit 1
          fi

          PLIST_PATH="$APP_PATH/Contents/Info.plist"

          # Show original bundle ID
          echo "Original Bundle ID:"
          /usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$PLIST_PATH"

          # Patch bundle ID to match App Store Connect
          echo ""
          echo "Patching bundle ID to com.clidey.whodb..."
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier com.clidey.whodb" "$PLIST_PATH"

          # Add encryption exemption (only uses standard OS TLS/SSL)
          echo "Adding encryption exemption key..."
          /usr/libexec/PlistBuddy -c "Add :ITSAppUsesNonExemptEncryption bool false" "$PLIST_PATH" 2>/dev/null || \
          /usr/libexec/PlistBuddy -c "Set :ITSAppUsesNonExemptEncryption false" "$PLIST_PATH"

          # Verify the changes
          echo "New Bundle ID:"
          /usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$PLIST_PATH"
          echo "Encryption exemption:"
          /usr/libexec/PlistBuddy -c "Print :ITSAppUsesNonExemptEncryption" "$PLIST_PATH"

          # Validate plist is still valid
          plutil -lint "$PLIST_PATH"

          echo ""
          echo "üîè Signing app bundle for DMG distribution with Developer ID..."
          codesign --force --deep \
            --sign "$APPLE_DEVELOPER_ID_APPLICATION" \
            --options runtime \
            --timestamp \
            "$APP_PATH"

          echo "Verifying signature..."
          codesign --verify --verbose=4 "$APP_PATH"

          echo "‚úÖ App patched, signed, and verified for DMG distribution"

      - name: Import MAS Certificates for Signing
        if: matrix.platform == 'darwin' && matrix.build-type == 'mas' && matrix.enabled != false
        env:
          MAS_CERTIFICATE_P12_BASE64: ${{ secrets.APPLE_MAS_CERTIFICATES_P12 }}
          MAS_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_MAS_CERTIFICATES_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          if [ -z "$MAS_CERTIFICATE_P12_BASE64" ]; then
            echo "‚ùå ERROR: Mac App Store certificates are required for MAS builds"
            exit 1
          fi

          echo "üîê Setting up keychain for Mac App Store code signing..."

          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/mas_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/mas-signing.keychain-db
          KEYCHAIN_PASSWORD_VALUE="${KEYCHAIN_PASSWORD:-$(uuidgen)}"

          # Decode certificate
          echo "$MAS_CERTIFICATE_P12_BASE64" | base64 --decode -o "$CERTIFICATE_PATH"

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD_VALUE" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD_VALUE" "$KEYCHAIN_PATH"

          # Import certificate to keychain
          security import "$CERTIFICATE_PATH" -P "$MAS_CERTIFICATE_PASSWORD" \
            -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"

          # Set keychain search list
          security list-keychain -d user -s "$KEYCHAIN_PATH" $(security list-keychains -d user | sed s/\"//g)

          # Allow codesign to access keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: \
            -s -k "$KEYCHAIN_PASSWORD_VALUE" "$KEYCHAIN_PATH"

          echo "‚úÖ Mac App Store certificates imported successfully"

          # Save MAS certificate name for signing step
          MAS_CERT=$(security find-identity -v -p codesigning "$KEYCHAIN_PATH" | grep "3rd Party Mac Developer Application" | head -1 | awk '{print $2}')
          echo "MAS_CERT_ID=$MAS_CERT" >> $GITHUB_ENV
          echo "Using certificate: $MAS_CERT"

      - name: Patch Bundle ID, Embed Profile, and Sign (MAS)
        if: matrix.platform == 'darwin' && matrix.build-type == 'mas' && matrix.enabled != false
        working-directory: ./desktop-${{ inputs.edition }}
        run: |
          APP_PATH="build/darwin/universal/WhoDB.app"

          if [ ! -d "$APP_PATH" ]; then
            echo "‚ùå ERROR: App bundle not found at $APP_PATH"
            exit 1
          fi

          PLIST_PATH="$APP_PATH/Contents/Info.plist"

          # Show original bundle ID
          echo "Original Bundle ID:"
          /usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$PLIST_PATH"

          # Patch bundle ID to match App Store Connect
          echo ""
          echo "Patching bundle ID to com.clidey.whodb..."
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier com.clidey.whodb" "$PLIST_PATH"

          # Add encryption exemption (only uses standard OS TLS/SSL)
          echo "Adding encryption exemption key..."
          /usr/libexec/PlistBuddy -c "Add :ITSAppUsesNonExemptEncryption bool false" "$PLIST_PATH" 2>/dev/null || \
          /usr/libexec/PlistBuddy -c "Set :ITSAppUsesNonExemptEncryption false" "$PLIST_PATH"

          # Add LSApplicationCategoryType
          echo "Adding LSApplicationCategoryType..."
          /usr/libexec/PlistBuddy -c "Add :LSApplicationCategoryType string public.app-category.developer-tools" "$PLIST_PATH" 2>/dev/null || \
          /usr/libexec/PlistBuddy -c "Set :LSApplicationCategoryType public.app-category.developer-tools" "$PLIST_PATH"

          # Verify the changes
          echo "New Bundle ID:"
          /usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$PLIST_PATH"
          echo "Encryption exemption:"
          /usr/libexec/PlistBuddy -c "Print :ITSAppUsesNonExemptEncryption" "$PLIST_PATH"

          # Validate plist is still valid
          plutil -lint "$PLIST_PATH"

          # Ensure binary has execute permissions
          echo ""
          echo "üîß Ensuring binary has execute permissions..."
          chmod +x "$APP_PATH/Contents/MacOS/whodb"
          ls -la "$APP_PATH/Contents/MacOS/whodb"

          # Step 1: Embed provisioning profile (per Wails docs)
          echo ""
          echo "üìù Step 1: Embedding provisioning profile..."
          if [ -f "build/darwin/embedded.provisionprofile" ]; then
            cp build/darwin/embedded.provisionprofile "$APP_PATH/Contents/embedded.provisionprofile"
            echo "‚úÖ Provisioning profile embedded at: $APP_PATH/Contents/embedded.provisionprofile"
          else
            echo "‚ùå ERROR: No provisioning profile found"
            exit 1
          fi

          # Step 2: Code sign with MAS certificate (per Wails docs)
          echo ""
          echo "üîè Step 2: Code signing with Mac App Store certificate..."
          echo "Using certificate: $MAS_CERT_ID"
          echo "Using entitlements: build/darwin/entitlements.plist"

          # Sign the app bundle (following Wails documentation approach)
          codesign --force \
            --sign "$MAS_CERT_ID" \
            --entitlements build/darwin/entitlements.plist \
            --options runtime \
            --timestamp \
            "$APP_PATH"

          echo ""
          echo "‚úÖ App signed for Mac App Store"

          # Step 3: Verify signature
          echo ""
          echo "üîç Step 3: Verifying signature..."
          codesign --verify --verbose=4 "$APP_PATH"

          echo ""
          echo "üìã Entitlements:"
          codesign --display --entitlements - "$APP_PATH"

          echo ""
          echo "‚úÖ MAS build complete and verified"

      - name: Create macOS DMG
        if: matrix.platform == 'darwin' && matrix.build-type == 'dmg' && matrix.enabled != false
        working-directory: ./desktop-${{ inputs.edition }}
        run: make dmg-mac-only VERSION=${{ inputs.version }}

      - name: Sign and Notarize DMG
        if: matrix.platform == 'darwin' && matrix.build-type == 'dmg' && matrix.enabled != false
        env:
          APPLE_DEVELOPER_ID_APPLICATION: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        working-directory: ./desktop-${{ inputs.edition }}
        run: |
          # Validate all required credentials
          if [ -z "$APPLE_DEVELOPER_ID_APPLICATION" ]; then
            echo "‚ùå ERROR: APPLE_DEVELOPER_ID_APPLICATION is required"
            exit 1
          fi

          if [ -z "$APPLE_ID" ] || [ -z "$APPLE_APP_PASSWORD" ] || [ -z "$APPLE_TEAM_ID" ]; then
            echo "‚ùå ERROR: APPLE_ID, APPLE_APP_PASSWORD, and APPLE_TEAM_ID are required for notarization"
            exit 1
          fi

          DMG_FILE="build/darwin/universal/whodb.dmg"

          # Sign the DMG with Developer ID
          echo "Signing DMG with Developer ID certificate..."
          codesign --force --sign "$APPLE_DEVELOPER_ID_APPLICATION" \
            --options runtime --timestamp "$DMG_FILE"

          # Notarize
          echo "üì§ Submitting DMG for notarization..."
          xcrun notarytool submit "$DMG_FILE" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait

          echo "üìé Stapling notarization ticket..."
          xcrun stapler staple "$DMG_FILE"
          echo "‚úÖ DMG signed and notarized"

      - name: Cleanup build artifacts before upload
        if: matrix.platform == 'darwin' && matrix.enabled != false
        working-directory: ./desktop-${{ inputs.edition }}
        run: |
          echo "Cleaning up intermediate build files..."
          # Remove DMG staging directory (duplicate of app bundle)
          rm -rf build/dmgroot
          # Remove bin directory if it exists
          rm -rf build/bin
          # List what's left
          echo "Remaining files to upload:"
          du -sh build/darwin/universal/* || true

      # Upload DMG artifacts (only for DMG builds)
      - name: Upload macOS DMG
        if: matrix.platform == 'darwin' && matrix.build-type == 'dmg' && matrix.enabled != false
        uses: actions/upload-artifact@v4
        with:
          name: desktop-darwin-dmg
          path: desktop-${{ inputs.edition }}/build/darwin/universal/*.dmg
          retention-days: 1

      - name: Upload macOS App Bundle (DMG)
        if: matrix.platform == 'darwin' && matrix.build-type == 'dmg' && matrix.enabled != false
        uses: actions/upload-artifact@v4
        with:
          name: desktop-darwin-app
          path: desktop-${{ inputs.edition }}/build/darwin/universal/*.app
          retention-days: 1

      # Upload MAS artifacts (only for MAS builds)
      - name: Upload macOS App Bundle (MAS)
        if: matrix.platform == 'darwin' && matrix.build-type == 'mas' && matrix.enabled != false
        uses: actions/upload-artifact@v4
        with:
          name: desktop-darwin-mas-app
          path: desktop-${{ inputs.edition }}/build/darwin/universal/*.app
          retention-days: 1

      - name: Upload macOS MAS Entitlements
        if: matrix.platform == 'darwin' && matrix.build-type == 'mas' && matrix.enabled != false
        uses: actions/upload-artifact@v4
        with:
          name: desktop-darwin-entitlements
          path: desktop-${{ inputs.edition }}/build/darwin/entitlements.plist
          retention-days: 1

      - name: Upload artifacts (non-macOS)
        if: matrix.enabled != false && matrix.platform != 'darwin' && (matrix.arch != 'arm64' || matrix.platform != 'windows')
        uses: actions/upload-artifact@v4
        with:
          name: desktop-${{ matrix.platform }}-${{ matrix.arch || 'all' }}
          path: desktop-${{ inputs.edition }}/build/
          retention-days: 1

      # Cleanup keychain (macOS only)
      - name: Cleanup Keychain
        if: always() && matrix.platform == 'darwin' && matrix.enabled != false
        run: |
          echo "üßπ Cleaning up keychains..."
          # Clean up DMG keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          if [ -f "$KEYCHAIN_PATH" ]; then
            security delete-keychain "$KEYCHAIN_PATH" || true
            echo "‚úÖ DMG keychain cleanup complete"
          fi
          # Clean up MAS keychain
          MAS_KEYCHAIN_PATH=$RUNNER_TEMP/mas-signing.keychain-db
          if [ -f "$MAS_KEYCHAIN_PATH" ]; then
            security delete-keychain "$MAS_KEYCHAIN_PATH" || true
            echo "‚úÖ MAS keychain cleanup complete"
          fi