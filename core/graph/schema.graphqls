# GraphQL schema example
#
# https://gqlgen.com/getting-started/

enum DatabaseType {
  Postgres,
  MySQL,
  Sqlite3,
  MongoDB,
  Redis,
  ElasticSearch,
  MariaDB,
}

type Column {
  Type: String!
  Name: String!
}

type RowsResult {
  Columns: [Column!]!
  Rows: [[String!]!]!
  DisableUpdate: Boolean!
}

type Record {
  Key: String!
  Value: String!
}

input RecordInput {
  Key: String!
  Value: String!
  Extra: [RecordInput!]
}

type StorageUnit {
  Name: String!
  Attributes: [Record!]!
}

enum GraphUnitRelationshipType {
  OneToOne,
  OneToMany,
  ManyToOne,
  ManyToMany,
  Unknown,
}

type GraphUnitRelationship {
  Name: String!
  Relationship: GraphUnitRelationshipType!
}

type GraphUnit {
  Unit: StorageUnit!
	Relations: [GraphUnitRelationship!]!
}

input LoginCredentials {
  Id: String
  Type: String!
  Hostname: String!
  Username: String!
  Password: String!
  Database: String!
  Advanced: [RecordInput!]
}

input LoginProfileInput {
  Id: String!
  Type: DatabaseType!
  Database: String
}

type LoginProfile {
  Id: String!
  Type: DatabaseType!
  Database: String
}

type StatusResponse {
  Status: Boolean!
}


type Query {
  Profiles: [LoginProfile!]!
  Database(type: DatabaseType!): [String!]!
  Schema(type: DatabaseType!): [String!]!
  StorageUnit(type: DatabaseType!, schema: String!): [StorageUnit!]! # tables, collections
  Row(type: DatabaseType!, schema: String!, storageUnit: String!, where: String!, pageSize: Int!, pageOffset: Int!): RowsResult! # row, document
  RawExecute(type: DatabaseType!, query: String!): RowsResult!
  Graph(type: DatabaseType!, schema: String!): [GraphUnit!]!
}

type Mutation {
  Login(credentials: LoginCredentials!): StatusResponse!
  LoginWithProfile(profile: LoginProfileInput!): StatusResponse!
  Logout: StatusResponse!

  AddStorageUnit(type: DatabaseType!, schema: String!, storageUnit: String!, fields: [RecordInput!]!): StatusResponse!
  UpdateStorageUnit(type: DatabaseType!, schema: String!, storageUnit: String!, values: [RecordInput!]!): StatusResponse!
  AddRow(type: DatabaseType!, schema: String!, storageUnit: String!, values: [RecordInput!]!): StatusResponse!
  DeleteRow(type: DatabaseType!, schema: String!, storageUnit: String!, values: [RecordInput!]!): StatusResponse!
}