# Licensed to Clidey Limited under one or more contributor
# license agreements. See the NOTICE file distributed with
# this work for additional information regarding copyright
# ownership. Clidey Limited licenses this file to you under
# the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

enum DatabaseType {
  Postgres,
  MySQL,
  Sqlite3,
  MongoDB,
  Redis,
  ElasticSearch,
  MariaDB,
  ClickHouse,
}

type Column {
  Type: String!
  Name: String!
}

type RowsResult {
  Columns: [Column!]!
  Rows: [[String!]!]!
  DisableUpdate: Boolean!
}

type Record {
  Key: String!
  Value: String!
}

input RecordInput {
  Key: String!
  Value: String!
  Extra: [RecordInput!]
}

type StorageUnit {
  Name: String!
  Attributes: [Record!]!
}

enum GraphUnitRelationshipType {
  OneToOne,
  OneToMany,
  ManyToOne,
  ManyToMany,
  Unknown,
}

type GraphUnitRelationship {
  Name: String!
  Relationship: GraphUnitRelationshipType!
}

type GraphUnit {
  Unit: StorageUnit!
	Relations: [GraphUnitRelationship!]!
}

input LoginCredentials {
  Id: String
  Type: String!
  Hostname: String!
  Username: String!
  Password: String!
  Database: String!
  Advanced: [RecordInput!]
}

type SettingsConfig {
  MetricsEnabled: Boolean
}

input SettingsConfigInput {
  MetricsEnabled: String
}

input LoginProfileInput {
  Id: String!
  Type: DatabaseType!
  Database: String
}

type LoginProfile {
  Alias: String
  Id: String!
  Type: DatabaseType!
  Database: String
}

type StatusResponse {
  Status: Boolean!
}

input ChatInput {
  PreviousConversation: String!
  Query: String!
  Model: String!
  Token: String
}

type AIChatMessage {
  Type: String!
  Result: RowsResult
  Text: String!
}

type Query {
  Version: String!
  Profiles: [LoginProfile!]!
  Database(type: String!): [String!]!
  Schema: [String!]!
  StorageUnit(schema: String!): [StorageUnit!]!
  Row(schema: String!, storageUnit: String!, where: String!, pageSize: Int!, pageOffset: Int!): RowsResult!
  RawExecute(query: String!): RowsResult!
  Graph(schema: String!): [GraphUnit!]!
  AIModel(modelType: String!, token: String): [String!]!
  AIChat(modelType: String!, token: String, schema: String!, input: ChatInput!): [AIChatMessage!]!
  SettingsConfig: SettingsConfig!
}

type Mutation {
  Login(credentials: LoginCredentials!): StatusResponse!
  LoginWithProfile(profile: LoginProfileInput!): StatusResponse!
  Logout: StatusResponse!
  UpdateSettings(newSettings: SettingsConfigInput!): StatusResponse!

  AddStorageUnit(schema: String!, storageUnit: String!, fields: [RecordInput!]!): StatusResponse!
  UpdateStorageUnit(schema: String!, storageUnit: String!, values: [RecordInput!]!): StatusResponse!
  AddRow(schema: String!, storageUnit: String!, values: [RecordInput!]!): StatusResponse!
  DeleteRow(schema: String!, storageUnit: String!, values: [RecordInput!]!): StatusResponse!
}